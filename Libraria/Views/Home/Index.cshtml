@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Antiforgery

@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    Layout = "~/Views/Shared/_indexLayout.cshtml";
    ViewData["Title"] = "Library Management System";
}

<style>
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f0f4fc;
        color: #2c3e50;
    }

    header {
        background-color: #4e73df;
        color: #fff;
        text-align: center;
        padding: 30px 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

        header h1 {
            font-size: 2.5em;
            font-weight: 600;
            margin: 0;
        }

        header p {
            font-size: 1.2em;
            margin: 5px 0 0;
            font-style: italic;
        }

    #filterInput {
        display: block;
        margin: 20px auto;
        padding: 10px 15px;
        font-size: 18px;
        border: 2px solid #4e73df;
        border-radius: 8px;
        width: 80%;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .text-muted {
        color: #6c757d;
    }

    .reserve-link {
        color: #007bff;
        text-decoration: none;
    }

        .reserve-link:hover {
            text-decoration: underline;
        }

    table {
        width: 90%;
        margin: 30px auto;
        border-collapse: collapse;
        box-shadow: 0 6px 10px rgba(0, 0, 0, 0.1);
        background-color: #fff;
        border-radius: 8px;
        overflow: hidden;
    }

        table thead {
            background-color: #4e73df;
            color: #fff;
            text-transform: uppercase;
        }

        table th, table td {
            padding: 15px;
            text-align: center;
            border: 1px solid #ddd;
            font-size: 1em;
        }

        table tr:nth-child(even) {
            background-color: #e4e9f6;
        }

        table tr:hover {
            background-color: #c6d1f4;
            transition: background-color 0.3s ease;
        }
</style>

<header>
    <h1>Library Management System</h1>
    <p>Your gateway to knowledge and discovery</p>
</header>

<input type="text" id="filterInput" placeholder="Filter books by title..." style="display:none;">

<table id="booksTable" style="display:none;">
    <thead>
        <tr>
            <th>Book ID</th>
            <th>Title</th>
            <th>ISBN</th>
            <th>Publication Date</th>
            <th>Stock</th>
            <th>Category</th>
            <th>Genre</th> 
            <th>Author</th>
            <th>Reservation</th>
        </tr>
    </thead>
    <tbody>
    </tbody>
</table>


@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            fetch('/Home/GetBooks')
                .then(response => response.json())
                .then(data => {
                    const table = document.getElementById('booksTable');
                    const tbody = table.querySelector('tbody');
                    const filterInput = document.getElementById('filterInput');
                    tbody.innerHTML = '';

                    data.forEach(book => {
                        const availableCopies = book.StockQuantity - book.CurrentReservations;

                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${book.BookID}</td>
                            <td>${book.Title}</td>
                            <td>${book.ISBN}</td>
                            <td>${new Date(book.PublicationDate).toLocaleDateString()}</td>
                            <td>${book.StockQuantity}</td>
                            <td>${book.CategoryName}</td>
                            <td>${book.GenreNames}</td> <!-- Display genre names -->
                            <td>${book.AuthorNames}</td>
                            <td>
                                ${availableCopies > 0
                                    ? `<a href="#" class="reserve-link" data-bookid="${book.BookID}">Reserve</a> (${availableCopies} available)`
                                    : `<span class="text-muted">Out of Stock</span>`}
                            </td>
                        `;
                        tbody.appendChild(row);
                    });

                    filterInput.style.display = 'block';
                    filterInput.value = '';
                    filterInput.addEventListener('input', function () {
                        const filterText = this.value.toLowerCase();
                        const rows = tbody.querySelectorAll('tr');
                        rows.forEach(row => {
                            const title = row.children[1].textContent.toLowerCase();
                            row.style.display = title.includes(filterText) ? '' : 'none';
                        });
                    });

                    // Add event listeners for reservation links
                    document.querySelectorAll('.reserve-link').forEach(element => {
                        element.addEventListener('click', function (e) {
                            e.preventDefault();
                            const bookId = this.getAttribute('data-bookid');
                            reserveBook(bookId);
                        });
                    });

                    table.style.display = 'table';
                });
        });

        function reserveBook(bookId) {
            fetch('/Home/ReserveBook', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': '@Antiforgery.GetAndStoreTokens(Context).RequestToken'
                },
                body: JSON.stringify({ bookId: bookId })
            })
            .then(response => {
                if (response.ok) {
                    alert('Book reserved successfully.');
                    location.reload();
                } else if (response.status === 400) {
                    response.text().then(msg => alert(msg));
                } else if (response.status === 401) {
                    alert('You must be logged in to reserve a book.');
                } else {
                    alert('Failed to reserve the book.');
                }
            });
        }
    </script>
}
